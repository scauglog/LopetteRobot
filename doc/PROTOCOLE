Protocole de communication ATMEGA8 <-> Raspberry Pi
----------------------------------------------------------------------------------------

Lien vers la page du projet :
- http://www.labri.fr/~vincent/Enseignement/SE/sujet-projet-2013-2014.html

Contraintes :
- Le protocole doit permettre de contrôler tout ce qu'il y a sur la carte
- Rien de spécifique à l'usb

Pins :
22 pins sont disponibles sur la cartes, ceux-ci sont numérotés ainsi :
A0-A7 -> 0-7
D0-D13 -> 8-21

Etat des pins :
Afin de permettre de changer la façon dont sont gérées certaines pins, celles-ci peuvent être dans différents états, il doit donc être possible de spécifier à la carte la façon dont l'on souhaite utiliser une pin. Ce nombre d'états étant très limité, deux bits suffisent à décrire l'état d'une pin.
0 -> Analog : La pin est considérée comme une entrée analogique, l'écriture est donc interdite
1 -> Digital : Les valeurs transmises à une pin digital sont uniquement des 0 ou des 1, ce mode permet la lecture et l'écriture
2 -> PWM : La distinction entre les PWM sur 8 bits et celles sur 16 bits est faîtes à la lecture et à l'écriture, elle n'est pas faîte au niveau des états des pins. Dans le cas d'une lecture, la valeur renvoyée sera celle qui est utilisée pour générer la PWM

Comme il est nécessaire de connaître à l'avance la taille d'un message lors d'une écriture et que lors d'une lecture le choix de la précision importe, la nuance entre ces deux types est donc gérée ainsi à l'intérieur des messages.
 * 2 -> PWM8
 * 3 -> PWM16
Dans le cas d'un envoi ne correspondant pas au type attendu, deux solutions sont possibles pour la carte :
 * Adapter l'information reçue (perte de précision si un PWM16 est traité comme un PWM8 par le driver et multiplication par 256 dans le cas opposé)
 * Envoyer un message d'erreur en signalant que le type de PWM envoyé ne correspond pas au type utilisé sur la carte


Modes de communication :
Deux modes sont proposés:
- synchrone :
    Chaque commande de la part de l'ordinateur attend une réponse de la part de la carte
    (Dans ce mode de communication, le heartbeat - défini plus loin - s'apparente à un ping/pong)
- asynchrone :
    L'ordinateur envoie des commandes sans se soucier de l'ordre. Il est donc possible d'effectuer plusieurs requêtes sans avoir à attendre de réponse (nécessaire dans le cas où l'on souhaite faire simultanément un set sur les pins avec des valeurs de nature différentes, notre protocole n'offrant pas cette possibilité)

Masque :
Afin de pouvoir appliquer une commande similaire à plusieurs pins en un seul message, la possibilité est fournie d'utiliser un masque sur les commandes. Ce masque tient sur 3 octets (les 2 bits du dernier octet étant inutilisés). Il se présente sous la forme suivante

|      octet 1     |          octet 2           |            octet 3          |
|0 1 2 3 4 5 6 7|8 9 10 11 12 13 14 15|16 17 18 19 20 21 x x|

À l'emplacement de chaque numéro, un 1 est utilisé si la pin en question est concernée par la commande et un 0 dans le cas contraire.

Masques de valeurs :
Lors d'une demande de lecture de la part du driver, les masques sont auto-suffisant étant donné que la seule information dont le firmware a besoin est de savoir de quels pins il a besoin de transmettre les valeurs. Cependant, dans le cas d'une écriture multiple de la part du driver, ou lorsque le firmware envoie les valeurs de plusieurs pins dans le même message, il est nécessaire de transmettre des données, les valeurs nécessitant un nombre de bit variable, trois cas peuvent être différenciés, dans ceux-ci nous définiront 'n' comme étant le nombre de bits à 1 dans le masque et donc le nombre de pins concernées par le message.

Masque de valeurs sur 1 bit : Digital
Dans ce cas, le masque de valeur aura une taille de ceil(n / 8) octets. Son apparence sera la suivante :

|            octet 1             |                    octet 2                 |...
|v1 v2 v3 v4 v5 v6 v7 v8|v9 v10 v11 v12 v13 v14 v15 v16|...

vi étant la valeur de la pin ayant la i-ème valeur non-nulle dans le masque

Masque de valeurs sur 8 bits : PWM8
Dans ce cas, le masque de valeurs aura une taille de n octets, avec l'apparence suivante

|            octet 1             |                    octet 2                 |...
|                 v1               |                      v2                     |...

vi étant la valeur de la pin ayant la i-ème valeur non-nulle dans le masque

Masque de valeurs sur 16 bits : PWM16, Analogique
Dans ce cas, le masque de valeurs aura une taille de 2 * n octets, avec l'apparence suivante

|   octet 1  |   octet 2   |   octet 3  |   octet 4   |...
|                 v1           |                      v2       |...

vi étant la valeur de la pin ayant la i-ème valeur non-nulle dans le masque

Header Commun :
Pour tous les messages, dans un sens comme dans l'autre, la structure commune est la suivante :
Octet 0:
- Bits 1-4 : Identifiant de la commande envoyée
- Bits 5-7 : Paramètres propres à la commande
- Bits 8: Checksum

Envoi
Liste des commandes : (sur 4 bits)
Chaque commande a un identifiant associé, afin de conserver une sémantique assez facile à comprendre, les id 0-7 (0xxx) sont attribuées à des fonctions concernant l'ensemble de la carte, tandis que les id 8-15(1xxx) sont attribuées à des fonctions concernant les pins.
 0 -> GetProtocolVersion : Demande à la carte quelle version du protocole utiliser
 1 -> Reset
 2 -> FailSafe Définit l'état que doit prendre l'arduino si la connexion est rompue (absence d'heartbeat)
 3 -> SetMode: Permet de choisir si la communication est faite de manière synchrone ou asynchrone
 4 -> SetHeartBeat Définit la fréquence des heartbeats
 5 -> HeartBeat Message signalant que l'ordinateur est présent et actif
 8 -> SetState Définit l'état que doit prendre une pin
 9 -> GetState Demande l'état d'une pin à la carte
10 -> Read Demande la valeur d'une ou de plusieurs pins
11 -> Write Écrit des valeurs sur différentes pins
12 -> MonitorRead: Demande à la carte de transmettre la valeur d'une ou de plusieurs pins à une fréquence donnée
- ...

Formatage des commandes

0 : GetProtocolVersion
Cette commande sert à négocier le protocole avec la carte, cette commande contiendra le numéro de la version la plus ancienne supportée par le driver, ainsi que le numéro de la plus récente. Étant à priori utilisée uniquement à l'ouverture de la connexion, cette commande ne doit pas nécessairement être d'une taille minimale. C'est pour cette raison que deux octets seront utilisés pour numéroter une version, il sera ainsi possible de supporter jusqu'à 65536 version au lieu de seulement 256 (nombre qui peut être atteint plus vite qu'on le pense)
Octet 1: 0000xxxx
Octet 2-3: <numéro de la plus vieille version supportée>
Octet 4-5: <numéro de la version la plus récente supportée>
Note : Il est envisageable que des drivers/firmware ne supportent pas des plages entières de version, mais uniquement certaines d'entres elles, dans ce cas, il faudrait raffiner le protocole afin de supporter ce cas.

1 : Reset
Octet 1: 0001aaax
aaa : Type de reset utilisé (hard, soft, juste la ligne) à déterminer
Description détaillée du rôle de cette commande à faire

2 : Failsafe
Il est possible que la connection entre la carte et le driver ne soit plus "alimentée", dans le cas où les heartBeat attendus ne sont pas reçus mais où la carte fonctionne encore, il peut être intéressant de définir quels doivent être les valeurs que prennent les pins dans ce cas là. Cette commande permet de définir ceux-ci:
Octet 1 : 0010xxxx
Octet 2 : État des pins 1-4 (pin 1 sur les 2 bits de poids faible et pin 4 sur les 2 bits de poids fort)
Octet 3 : État des pins 5-8
Octet 4 : État des pins 9-12
Octet 5 : État des pins 13-16
Octet 6 : État des pins 17-20
Octet 7 : État des pins 21-24
(pour rappel chaque état est codé sur 2 bits dont la valeur est :
0 -> Analog
1 -> Digital
2 -> PWM8
3 -> PWM16)
Octet 8+: Valeurs attribuées au pins
 * Afin de simplifier la lecture, le mode de transmission des valeurs suivant est adopté :
   * Les valeurs sont envoyés dans l'ordre des pins (La première valeur à apparaître sera celle de la première pin n'étant pas dans l'état analogique)
   * La transmission d'une valeur dépend de son type
     * Les digitaux sont écrits sur un seul bit
     * Les PWM8 sont écrits sur huit bits
     * Les PWM16 sont écrits sur seize bits
     * Les valeurs des analogiques ne sont pas spécifiées (comme on ne peut pas écrire dessus)
Cette manière de transmettre le failSafe engendre le fait qu'il est possible que des valeurs se retrouvent à cheval sur des octets, cela ne doit pas être gênant étant donné que l'on connait le nombre exact de bits requis à l'aide du contenu des octets 2 à 7. Comme il est possible que le nombre de bits à envoyer ne soit pas multiple de 8, dans ce cas des 0 sont envoyés pour compléter le dernier octet.

3: SetMode 
Octet 1: 0011axxx 
a: indique le mode utilisé (synchrone/asynchrone)

4: SetHeartBeat
Cette commande sert à régler la fréquence à laquelle les commande HeartBeat seront envoyées. 
Octet 1 : 0010aaaa
0 -> pas de heartbeat
1 -> 2Hz
2 -> 4Hz
3 -> 8Hz
4 -> 16Hz
5 -> 32Hz
6 -> 64Hz
7 -> 128Hz
...

5 : HeartBeat
Cette commande sert uniquement à indiquer que le driver est toujours actif, elle n'a donc pas de paramètre variable et peut toujours être définie à partir du même octet.
Octet 1: 0101xxxx
Proposition: transmettre le numéro de version

8 : SetState
Octet 1: 100000mx
 * m : utilisation d'un masque (oui = 1, non = 0)
Sans masque :
 * Octet 2: xttiiiii
   * tt : état à prendre sur deux bits (attention, ici la distinction entre PWM8 et PWM16 n'est pas faîte)
   * i correspondant à l'identifiant de la pin, codé sur 5 bits
Avec masque :
 * Octet 2-4 : masque d'écriture
 * Octet 5+ : valeurs des états à prendre
   * Chaque état étant codé sur deux octets, 4 états peuvent être transmis par octet, le dernier octet si incomplet sera complété par des zéros

9 : GetState
Octet 1: 1001mxxx
 * m : utilisation d'un masque (oui = 1, non = 0)
Sans masque :
 * Octet 2: xxxiiiii
Avec masque
 * Octet 2-4 : masque des états à obtenir

10 : Read
Octet 1 : 1010mxxx
 * m : utilisation d'un masque
 * il aurait été possible de définir le type sous lequel on veut lire une pins mais on perd la possibilité de lire plusieurs pins en même temps qui sont dans des états différents, ce qui est un gros inconvénient. Si nécessaire un SetState permettra d'obtenir le résultat escompté 
  - Si useMask = 1 alors mask sur 24 bit Sinon ID sur 5 bit

11 : Write
Octet 1 : 1011ttmx
 * tt : état sur deux bits (Analog, Digital, PWM8 ou PWM16)
 * m : utilisation d'un masque
  - Si useMask = 1 alors mask sur 24 bit Sinon ID sur 5 bit
  - data
  

12 : MonitorRead
Octet 1:1100ttmx
 * tt : état de lecture
 * m : utilisation d'un masque (oui = 1, non = 0)
Octet 2: Fréquence à laquelle la valeur doit être envoyée par le firmware en Hz
 * 00000000 : 0 Hz Arrêt du monitoring
 * 00000001 : 1 Hz
 * 10000000 : 128 Hz
Sans masque :
 * Octet 3: xxxiiiii
   * i correspondant à l'identifiant de la pin, codé sur 5 bits
Avec masque :
 * Octet 3-5 : masque des pins à monitorer


Reponse
Liste des reponses : (sur 4 bits)
 0 -> Error Un problème est apparu, cette commande est accompagnée de détails
 1 -> Ok La dernière commande s'est bien exécutée (utilisé pour les fonctions ne nécessitant pas de retour)
 2 -> ProtocolVersion Fourni la version du protocole qui va être utilisée pour l'échange
 8 -> StatesValues Fourni l'état d'un ou plusieurs pins
 9 -> PinsValues Fourni la valeur d'un ou plusieurs pins


Formatage des commandes

0 : Error
Ce message signale que la carte n'a pas réussi à traiter le message envoyé par le driver, comme il peut y avoir un grand nombre d'erreurs possibles et qu'il est nécessaire d'avoir un retour sur ce qui s'est passé afin de traiter correctement le problème, un grand nombre d'erreur différentes est prévu.
Octet 0 : 0000xxxx
Octet 1-2 : numéro d'erreur
Octet 3+ : détails à propos de l'erreur

1 : Ok
Cette réponse convient pour toutes les commandes dont le seul retour est de savoir si tout s'est bien passé (principalement toutes les commandes ayant pour but de faire un set, en opposition aux gets).
Octet 0: 0001xxxx

2 : ProtocolVersion
Cette réponse permettra de fixer la version du protocole qui sera utilisée par la carte et le driver.
Octet 0 : 0010xxxx
Octet 1-2 : numéro de la version utilisée

8 : StatesValues
Ce message fera suite à un getState
Octet 0 : 1000mxxx
 * m : utilisation d'un masque (oui = 1, non = 0)
Sans masque :
 * Octet 2: xttiiiii
   * tt : état à prendre sur deux bits (attention, ici la distinction entre PWM8 et PWM16 n'est pas faîte)
   * i correspondant à l'identifiant de la pin, codé sur 5 bits
Avec masque :
 * Octet 2-4 : masque des valeurs fournies
 * Octet 5+ : valeurs des états
   * Chaque  état étant codé sur deux octets, 4 états peuvent être transmis par  octet, le dernier octet si incomplet sera complété par des zéros


9 : PinsValues
Ce message fera suite à un read
Octet 0 : 1000mttx
 * m : utilisation d'un masque (oui = 1, non = 0)
 * tt : état à prendre sur deux bits (attention, ici la distinction entre PWM8 et PWM16 n'est pas faîte)
Sans masque :
 * Cas digital :
   * Octet 2: vxxiiiii
   * v : valeur
   * i correspondant à l'identifiant de la pin, codé sur 5 bits
 * PWM ou analogique
   * Octet 2: xxxiiiii
   * i correspondant à l'identifiant de la pin, codé sur 5 bits
   * Cas PWM8
     * Octet 3 : valeur
   * Cas PWM16 ou analogique
     * Octet 3-4 : valeur
Avec masque :
 * Octet 2-4 : masque des valeurs fournies
 * Octet 5+ : valeurs des pins
   * Chaque valeur pouvant être écrite en 1, 8 ou 16 bits suivant le type utilisé, le masque de valeur approprié sera utilisé

-ResponseGetProtocolVersion
  - version min sur 1 octet
  - version max sur 1 octet
  - version courante sur 1 octet


-ResponseMonitorRead :
  - useMask sur 1 bit
  - Si useMask = 1 alors mask sur 24 bit Sinon ID sur 5 bit
  - frequence (Si 0 désactive)

- ...

Phase d'initialisation :
1/ RASPBERRY - GetProtocolVersion
// Si arduino a un numéro de version compatible
        2/ ARDUINO - ProtocolVersion
// Sinon
        2/ ARDUINO - Error (1)
        // Et dans ce cas la discussion qui suit est impossible
// Les échanges qui suit ne sont pas nécessaires mais fortement conseillés
3/ RASPBERRY -  Failsafe
4/ ARDUINO - ok
3/ RASPBERRY - SetMode
4/ ARDUINO - ok
5/ RASPBERRY - SetHeartBeat
6/ ARDUINO - ok
7/ RASPBERRY - MonitorRead
8/ ARDUINO - ok

Remarque :
Nous avons préféré gérer les protocoles en début de communication et non en cours de route.

Scénario d'utilisation : la RASPBERRY envoi un PWM8 sur la pin 7
[Initialisation déjà faite]
1/ RASPBERRY - GetState (facultatif, pour tester de l'état de la pin7)
        10010xxx    xxx00111
2/ ARDUINO - StatesValues
// Si la pin7 n'est pas en PWM8
        3/ RASPBERRY - SetState (mode PWM8 sur la pin7 sans masque)
        1000000x    x1000111
        4/ ARDUINO - ok
        0001xxxx
5/ RASPBERRY - Write
        1011100x    valueval
6/ ARDUINO - ok
        0001xxxx
Checksum
TODO (dernier bit du premier octet ou octet final)

Errors

Erreurs possibles :
0 -> Invalid Checksum Problème avec la checksum du message reçu par la carte
1 -> No protocol found Pas de version du protocole commune au driver et au firmware
2 -> Unkown command Pas d'erreur de communication mais mauvaise commande/paramètre envoyés
3 -> ...

Formatage des erreurs :

Points à clarifier
 * Little endian ou big endian (ordre d'écriture général à définir)
 * Checksum
 * Erreurs
 * Négociation de la version (plage de compatibilité continue ou non)
 * Initialisation de la connexion (Opérations nécessaires à l'établissement d'une connexion)
 * Comportement du reset
 * Scénario d'utilisation
 * Exemples de message
 * Description des modèles de masque de valeur
 * ...

